require('dotenv').config();
const transporter = require('../utils/mailer');
const logger = require('../utils/logger');

class EmailService {
  constructor() {
    this.isEnabled = !!(process.env.MAIL_USER && process.env.MAIL_PASSWORD);

    if (!this.isEnabled) {
      console.log('üìß Service Email d√©sactiv√© - Pas de configu      logger.error('‚ùå Erreur lors de l'envoi de l'email de notification de changement de mot de passe :', error);
    }
  }

  async sendOrderStatusUpdate(email, order, oldStatus, newStatus) {
    if (!this.isEnabled) return;

    const statusLabels = {
      'pending': 'En attente',
      'confirmed': 'Confirm√©e',
      'shipped': 'Exp√©di√©e',
      'delivered': 'Livr√©e',
      'cancelled': 'Annul√©e'
    };

    const statusMessages = {
      'confirmed': 'Votre commande a √©t√© confirm√©e et sera bient√¥t pr√©par√©e.',
      'shipped': 'Votre commande a √©t√© exp√©di√©e ! Vous devriez la recevoir sous peu.',
      'delivered': 'Votre commande a √©t√© livr√©e avec succ√®s.',
      'cancelled': 'Votre commande a √©t√© annul√©e. Si vous avez des questions, contactez notre service client.'
    };

    const mailOptions = {
      from: process.env.MAIL_FROM,
      to: email,
      subject: `Mise √† jour de votre commande #${order.id}`,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">Mise √† jour de votre commande</h2>
          
          <p>Bonjour ${order.user.firstName || 'Cher client'},</p>
          
          <p>Le statut de votre commande <strong>#${order.id}</strong> a √©t√© mis √† jour :</p>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 5px; margin: 20px 0;">
            <p style="margin: 0;"><strong>Ancien statut :</strong> ${statusLabels[oldStatus] || oldStatus}</p>
            <p style="margin: 10px 0 0 0;"><strong>Nouveau statut :</strong> <span style="color: #28a745;">${statusLabels[newStatus] || newStatus}</span></p>
          </div>
          
          <p>${statusMessages[newStatus] || 'Le statut de votre commande a √©t√© mis √† jour.'}</p>
          
          <div style="background-color: #e9ecef; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <h3 style="margin-top: 0;">D√©tails de la commande :</h3>
            <p><strong>Num√©ro :</strong> #${order.id}</p>
            <p><strong>Total :</strong> ${order.total}‚Ç¨</p>
            <p><strong>Date :</strong> ${new Date(order.createdAt).toLocaleDateString('fr-FR')}</p>
          </div>
          
          <p>Vous pouvez suivre votre commande en vous connectant √† votre compte sur notre site.</p>
          
          <p style="color: #666; font-size: 0.9em;">
            Si vous avez des questions, n'h√©sitez pas √† nous contacter.<br>
            Merci de votre confiance !
          </p>
        </div>
      `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de mise √† jour de statut envoy√© √† ${email} pour la commande ${order.id}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l\'envoi de l\'email de mise √† jour de statut :', error);
    }
  }ion SMTP');
      logger.info('Email service disabled - no SMTP configuration');
      return;
    }
    this.transporter = transporter

    this.verifyConnection();
  }

  async verifyConnection() {
    try {
      await this.transporter.verify();
      logger.info('‚úÖ Connexion au service SMTP v√©rifi√©e');
    } catch (err) {
      logger.error('‚ùå Erreur lors de la v√©rification SMTP :', err);
    }
  }

  async sendVerificationEmail(email, token, userData) {
    if (!this.isEnabled) return;

    // Remplace l'URL par celle de ton frontend si besoin
    const verificationUrl = `http://localhost:5173/verify-email?token=${token}`; // adapte l'URL si besoin

    const mailOptions = {
      from: process.env.MAIL_FROM,
      to: email,
      subject: 'Confirmation de votre adresse email',
      html: `
    <p>Merci de vous √™tre inscrit.</p>
    <p>Cliquez sur le lien ci-dessous pour activer votre compte :</p>
    <p><a href="${verificationUrl}">Activer mon compte</a></p>
    <p>Ou copiez ce lien dans votre navigateur :<br>${verificationUrl}</p>
  `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de v√©rification envoy√© √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de v√©rification :', error);
    }
  }

  async sendPasswordResetEmail(email, token, userData) {
    if (!this.isEnabled) return;

    const resetUrl = `http://localhost:5173/reset-password/${token}`;

    const mailOptions = {
      from: process.env.MAIL_FROM,
      to: email,
      subject: 'R√©initialisation de votre mot de passe',
      html: `
      <p>Bonjour,</p>
      <p>Vous avez demand√© √† r√©initialiser votre mot de passe.</p>
      <p>Cliquez sur le lien ci-dessous pour d√©finir un nouveau mot de passe :</p>
      <p><a href="${resetUrl}">R√©initialiser mon mot de passe</a></p>
      <p>Si vous n'avez pas demand√© cette action, ignorez simplement ce message.</p>
    `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de r√©initialisation envoy√© √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de r√©initialisation :', error);
    }
  }

  async sendAccountLockedEmail(email, userData) {
    if (!this.isEnabled) return;

    const name = userData?.firstName
      ? `${userData.firstName} ${userData.lastName || ''}`.trim()
      : 'client';

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: email,
      subject: "Votre compte a √©t√© verrouill√©",
      text: `Bonjour ${name},\n\nVotre compte a √©t√© verrouill√© suite √† plusieurs tentatives de connexion √©chou√©es. Merci de contacter le support pour le r√©activer.\n\nCordialement,\nL'√©quipe Marketplace`,
      html: `<p>Bonjour <b>${name}</b>,</p>
           <p>Votre compte a √©t√© <b>verrouill√©</b> suite √† plusieurs tentatives de connexion √©chou√©es.</p>
           <p>Merci de contacter le support pour le r√©activer.</p>
           <p>Cordialement,<br>L'√©quipe Marketplace</p>`
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de compte verrouill√© envoy√© √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de compte verrouill√© :', error);
    }
  }

  async sendNewProductAlert(email, product, userData) {
    if (!this.isEnabled) return;

    const name = userData?.firstName
      ? `${userData.firstName} ${userData.lastName || ''}`.trim()
      : 'client';

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: email,
      subject: `Nouveau produit disponible : ${product.name}`,
      text: `Bonjour ${name},\n\nUn nouveau produit "${product.name}" est maintenant disponible sur notre boutique !\n\nDescription : ${product.description}\nPrix : ${product.price} ‚Ç¨\n\nVenez vite le d√©couvrir !\n\nCordialement,\nL'√©quipe Marketplace`,
      html: `<p>Bonjour <b>${name}</b>,</p>
           <p>Un nouveau produit <b>${product.name}</b> est maintenant disponible sur notre boutique !</p>
           <p>Description : ${product.description}<br>Prix : <b>${product.price} ‚Ç¨</b></p>
           <p><a href="${process.env.FRONTEND_URL}/product/${product.id}">Voir le produit</a></p>
           <p>Cordialement,<br>L'√©quipe Marketplace</p>`
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Alerte nouveau produit envoy√©e √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôalerte nouveau produit :', error);
    }
  }

  async sendRestockAlert(email, product, userData) {
    if (!this.isEnabled) return;

    const name = userData?.firstName
      ? `${userData.firstName} ${userData.lastName || ''}`.trim()
      : 'client';

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: email,
      subject: `Produit de retour en stock : ${product.name}`,
      text: `Bonjour ${name},\n\nLe produit "${product.name}" est de nouveau disponible !\n\nPrix : ${product.price} ‚Ç¨\n\nProfitez-en vite !\n\nCordialement,\nL'√©quipe Marketplace`,
      html: `<p>Bonjour <b>${name}</b>,</p>
           <p>Le produit <b>${product.name}</b> est de nouveau disponible !</p>
           <p>Prix : <b>${product.price} ‚Ç¨</b></p>
           <p><a href="${process.env.FRONTEND_URL}/product/${product.id}">Voir le produit</a></p>
           <p>Cordialement,<br>L'√©quipe Marketplace</p>`
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Alerte restock envoy√©e √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôalerte restock :', error);
    }
  }

  async sendPriceChangeAlert(email, product, oldPrice, userData) {
    if (!this.isEnabled) return;

    const name = userData?.firstName
      ? `${userData.firstName} ${userData.lastName || ''}`.trim()
      : 'client';

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: email,
      subject: `Changement de prix : ${product.name}`,
      text: `Bonjour ${name},\n\nLe prix du produit "${product.name}" a chang√© :\nAncien prix : ${oldPrice} ‚Ç¨\nNouveau prix : ${product.price} ‚Ç¨\n\nProfitez-en !\n\nCordialement,\nL'√©quipe Marketplace`,
      html: `<p>Bonjour <b>${name}</b>,</p>
           <p>Le prix du produit <b>${product.name}</b> a chang√© !</p>
           <p>Ancien prix : <s>${oldPrice} ‚Ç¨</s><br>Nouveau prix : <b>${product.price} ‚Ç¨</b></p>
           <p><a href="${process.env.FRONTEND_URL}/product/${product.id}">Voir le produit</a></p>
           <p>Cordialement,<br>L'√©quipe Marketplace</p>`
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Alerte changement de prix envoy√©e √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôalerte changement de prix :', error);
    }
  }

  async sendOrderConfirmation(email, order, user, invoicePath) {
    if (!this.isEnabled) return;

    const name = user?.firstName
      ? `${user.firstName} ${user.lastName || ''}`.trim()
      : 'client';

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: email,
      subject: `Confirmation de votre commande #${order.id}`,
      text: `Bonjour ${name},

Merci pour votre commande sur Marketplace !

D√©tails de la commande :
- Num√©ro de commande : ${order.id}
- Montant total : ${order.total} ‚Ç¨

Votre commande est confirm√©e et sera trait√©e dans les plus brefs d√©lais.

Cordialement,
L'√©quipe Marketplace
`,
      html: `
      <div style="font-family: Arial, sans-serif; color: #222;">
        <h2>Merci pour votre commande !</h2>
        <p>Bonjour <b>${name}</b>,</p>
        <p>Votre commande <b>#${order.id}</b> a bien √©t√© confirm√©e.</p>
        <table style="margin: 16px 0;">
          <tr>
            <td style="padding: 4px 8px;">Num√©ro de commande :</td>
            <td style="padding: 4px 8px;"><b>${order.id}</b></td>
          </tr>
          <tr>
            <td style="padding: 4px 8px;">Montant total :</td>
            <td style="padding: 4px 8px;"><b>${order.total} ‚Ç¨</b></td>
          </tr>
        </table>
        <p>Votre commande est confirm√©e et sera trait√©e dans les plus brefs d√©lais.</p>
        <p style="margin-top:32px;">Cordialement,<br>L'√©quipe Marketplace</p>
      </div>
    `,
      attachments: invoicePath ? [{
        filename: `facture-${order.id}.pdf`,
        path: invoicePath
      }] : []
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Confirmation envoy√©e √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de confirmation :', error);
    }
  }

  async sendNewsletter(email, content, userData) {
    if (!this.isEnabled) return;
    // √Ä impl√©menter si besoin
  }

  async sendDataDeletionConfirmation(email, userData) {
    if (!this.isEnabled) return;
    // √Ä impl√©menter si besoin
  }

  async sendWelcomeEmail(userEmail, userName) {
    if (!this.isEnabled) return;

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: userEmail,
      subject: 'Bienvenue sur Marketplace !',
      text: `Bonjour ${userName || ''},\n\nBienvenue sur notre marketplace !\nNous sommes ravis de vous compter parmi nous.\n\nCordialement,\nL'√©quipe Marketplace`,
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de bienvenue envoy√© √† ${userEmail}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de bienvenue :', error);
    }
  }

  async sendPasswordReset(userEmail, userName, resetToken) {
    if (!this.isEnabled) return;

    const resetUrl = `http://localhost:5173/reset-password?token=${token}`;
    const mailOptions = {
      from: process.env.MAIL_USER,
      to: userEmail,
      subject: 'R√©initialisation de votre mot de passe',
      text: `Bonjour ${userName || ''},\n\nVoici le lien pour r√©initialiser votre mot de passe :\n${resetUrl}\n\nCe lien est valable 1 heure.\n\nCordialement,\nL'√©quipe Marketplace`,
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de r√©initialisation envoy√© √† ${userEmail}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de r√©initialisation :', error);
    }
  }

  async sendShippingNotification(userEmail, userName, trackingNumber, orderNumber) {
    if (!this.isEnabled) return;

    const mailOptions = {
      from: process.env.MAIL_USER,
      to: userEmail,
      subject: `Votre commande #${orderNumber} a √©t√© exp√©di√©e`,
      text: `Bonjour ${userName || ''},\n\nVotre commande #${orderNumber} a √©t√© exp√©di√©e.\nNum√©ro de suivi : ${trackingNumber}\n\nCordialement,\nL'√©quipe Marketplace`,
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email d'exp√©dition envoy√© √† ${userEmail}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail d‚Äôexp√©dition :', error);
    }
  }

  async sendPasswordChangedEmail(email, userData) {
    if (!this.isEnabled) return;

    const mailOptions = {
      from: process.env.MAIL_FROM,
      to: email,
      subject: 'Votre mot de passe a √©t√© modifi√©',
      html: `
      <p>Bonjour,</p>
      <p>Votre mot de passe vient d'√™tre modifi√©.</p>
      <p>Si ce n'est pas vous, <a href="http://localhost:5173/forgot-password">cliquez ici pour r√©initialiser votre mot de passe</a>.</p>
    `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email de notification de changement de mot de passe envoy√© √† ${email}`);
    } catch (error) {
      logger.error('‚ùå Erreur lors de l‚Äôenvoi de l‚Äôemail de notification de changement de mot de passe :', error);
    }
  }
}

module.exports = new EmailService();
