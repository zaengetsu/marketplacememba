// Service Email dÃ©sactivÃ© temporairement
const logger = require('../utils/logger');

class EmailService {
  constructor() {
    this.isEnabled = false;
    console.log('ğŸ“§ Service Email dÃ©sactivÃ© - Pas de configuration SMTP');
    logger.info('Email service disabled - no SMTP configuration');
  }

  async verifyConnection() {
    // Ne fait rien - service dÃ©sactivÃ©
    return;
  }

  // Toutes les mÃ©thodes d'email ne font rien mais ne gÃ©nÃ¨rent pas d'erreur
  async sendVerificationEmail(email, token, userData) {
    console.log('ğŸ“§ Email de vÃ©rification (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendPasswordResetEmail(email, token, userData) {
    console.log('ğŸ“§ Email de rÃ©initialisation (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendAccountLockedEmail(email, userData) {
    console.log('ğŸ“§ Email de compte verrouillÃ© (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendNewProductAlert(email, product, userData) {
    console.log('ğŸ“§ Email d\'alerte produit (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendRestockAlert(email, product, userData) {
    console.log('ğŸ“§ Email de restock (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendPriceChangeAlert(email, product, oldPrice, userData) {
    console.log('ğŸ“§ Email de changement de prix (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendOrderConfirmation(email, order, userData) {
    console.log('ğŸ“§ Email de confirmation de commande (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendNewsletter(email, content, userData) {
    console.log('ğŸ“§ Newsletter (dÃ©sactivÃ©e) pour:', email);
    return Promise.resolve();
  }

  async sendDataDeletionConfirmation(email, userData) {
    console.log('ğŸ“§ Email de suppression de donnÃ©es (dÃ©sactivÃ©) pour:', email);
    return Promise.resolve();
  }

  async sendWelcomeEmail(userEmail, userName) {
    console.log('ğŸ“§ Email de bienvenue (dÃ©sactivÃ©) pour:', userEmail);
    return Promise.resolve();
  }

  async sendPasswordReset(userEmail, userName, resetToken) {
    console.log('ğŸ“§ Email de rÃ©initialisation de mot de passe (dÃ©sactivÃ©) pour:', userEmail);
    return Promise.resolve();
  }

  async sendShippingNotification(userEmail, userName, trackingNumber, orderNumber) {
    console.log('ğŸ“§ Email de notification d\'expÃ©dition (dÃ©sactivÃ©) pour:', userEmail);
    return Promise.resolve();
  }
}

module.exports = new EmailService(); 