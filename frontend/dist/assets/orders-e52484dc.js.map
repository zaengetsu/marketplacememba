{"version":3,"file":"orders-e52484dc.js","sources":["../../src/stores/orders.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport { api } from '@/services/api'\n\nexport interface Order {\n  id: number\n  userId: number\n  total: number\n  status: 'pending' | 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled'\n  shippingAddress: any\n  billingAddress: any\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Invoice {\n  id: number\n  orderId: number\n  invoiceNumber: string\n  amount: number\n  status: 'draft' | 'sent' | 'paid' | 'overdue' | 'cancelled'\n  issuedAt: string\n  dueAt: string\n  paidAt?: string\n  order?: Order\n}\n\nexport interface PaymentIntent {\n  id: string\n  clientSecret: string\n  amount: number\n  currency: string\n  status: string\n}\n\nexport const useOrderStore = defineStore('orders', () => {\n  const orders = ref<Order[]>([])\n  const invoices = ref<Invoice[]>([])\n  const currentOrder = ref<Order | null>(null)\n  const currentPaymentIntent = ref<PaymentIntent | null>(null)\n  const isLoading = ref(false)\n\n  // Computed\n  const pendingOrders = computed(() => \n    orders.value.filter(order => order.status === 'pending')\n  )\n  \n  const completedOrders = computed(() => \n    orders.value.filter(order => ['delivered', 'completed'].includes(order.status))\n  )\n\n  // Actions\n  const createOrder = async (orderData: {\n    total: number\n    shippingAddress: any\n    billingAddress?: any\n    items: any[]\n  }) => {\n    isLoading.value = true\n    try {\n      const response = await api.orders.create(orderData)\n      if (response.data.success) {\n        currentOrder.value = response.data.data\n        orders.value.unshift(response.data.data)\n        return response.data.data\n      }\n      throw new Error(response.data.message || 'Erreur lors de la création de la commande')\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Erreur lors de la création de la commande')\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const createPaymentIntent = async (amount: number, orderId: number) => {\n    isLoading.value = true\n    try {\n      const response = await api.payments.createIntent({\n        amount,\n        currency: 'eur',\n        orderId\n      })\n      \n      if (response.data.success) {\n        currentPaymentIntent.value = {\n          id: response.data.data.paymentIntentId,\n          clientSecret: response.data.data.clientSecret,\n          amount: amount * 100, // Stripe utilise les centimes\n          currency: 'eur',\n          status: 'requires_payment_method'\n        }\n        return currentPaymentIntent.value\n      }\n      throw new Error(response.data.message || 'Erreur lors de la création du paiement')\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Erreur lors de la création du paiement')\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const confirmPayment = async (paymentIntentId: string, orderId?: number) => {\n    isLoading.value = true\n    try {\n      const response = await api.payments.confirm({\n        paymentIntentId,\n        orderId\n      })\n      \n      if (response.data.success) {\n        // Mettre à jour le statut de la commande\n        if (currentOrder.value) {\n          currentOrder.value.status = 'confirmed'\n          const orderIndex = orders.value.findIndex(o => o.id === currentOrder.value!.id)\n          if (orderIndex !== -1) {\n            orders.value[orderIndex] = { ...currentOrder.value }\n          }\n        }\n        return response.data.data\n      }\n      throw new Error(response.data.message || 'Erreur lors de la confirmation du paiement')\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Erreur lors de la confirmation du paiement')\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const fetchOrders = async (params?: any) => {\n    isLoading.value = true\n    try {\n      const response = await api.orders.getAll(params)\n      if (response.data.success) {\n        orders.value = response.data.data.orders\n        return response.data.data\n      }\n      throw new Error(response.data.message || 'Erreur lors de la récupération des commandes')\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération des commandes')\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const fetchOrderById = async (id: string) => {\n    isLoading.value = true\n    try {\n      const response = await api.orders.getById(id)\n      if (response.data.success) {\n        currentOrder.value = response.data.data\n        return response.data.data\n      }\n      throw new Error(response.data.message || 'Commande non trouvée')\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération de la commande')\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const fetchInvoices = async (params?: any) => {\n    isLoading.value = true\n    try {\n      const response = await api.invoices.getAll(params)\n      if (response.data.success) {\n        invoices.value = response.data.data.invoices\n        return response.data.data\n      }\n      throw new Error(response.data.message || 'Erreur lors de la récupération des factures')\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération des factures')\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const processCheckout = async (cartItems: any[], shippingAddress: any, billingAddress?: any) => {\n  try {\n    // 1. Calculer le total (utilise item.price déjà préparé)\n    const total = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n\n    // 2. Créer la commande\n    const order = await createOrder({\n      total,\n      shippingAddress,\n      billingAddress: billingAddress || shippingAddress,\n      items: cartItems\n    })\n\n    // 3. Créer l'intention de paiement\n    const paymentIntent = await createPaymentIntent(total, order.id)\n\n    return {\n      order,\n      paymentIntent\n    }\n  } catch (error) {\n    throw error\n  }\n}\n\n  const clearCurrentOrder = () => {\n    currentOrder.value = null\n    currentPaymentIntent.value = null\n  }\n\n  return {\n    // State\n    orders,\n    invoices,\n    currentOrder,\n    currentPaymentIntent,\n    isLoading,\n    \n    // Computed\n    pendingOrders,\n    completedOrders,\n    \n    // Actions\n    createOrder,\n    createPaymentIntent,\n    confirmPayment,\n    fetchOrders,\n    fetchOrderById,\n    fetchInvoices,\n    processCheckout,\n    clearCurrentOrder\n  }\n}) "],"names":["useOrderStore","defineStore","orders","ref","invoices","currentOrder","currentPaymentIntent","isLoading","pendingOrders","computed","order","completedOrders","createOrder","orderData","response","api","error","_b","_a","createPaymentIntent","amount","orderId","paymentIntentId","orderIndex","o","params","id","cartItems","shippingAddress","billingAddress","total","sum","item","paymentIntent"],"mappings":"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"}